"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _createForOfIteratorHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/createForOfIteratorHelper"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactMarkdown = _interopRequireDefault(require("react-markdown"));

var _remarkGfm = _interopRequireDefault(require("remark-gfm"));

var _prismjs = _interopRequireDefault(require("prismjs"));

require("prismjs/components/prism-markup");

var _langs = require("./langs");

var _default = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var _ref = props || {},
      className = _ref.className,
      source = _ref.source,
      style = _ref.style,
      onScroll = _ref.onScroll,
      onMouseOver = _ref.onMouseOver,
      other = (0, _objectWithoutProperties2.default)(_ref, ["className", "source", "style", "onScroll", "onMouseOver"]);

  var mdp = /*#__PURE__*/_react.default.createRef();

  var loadedLang = _react.default.useRef(['markup']);

  (0, _react.useEffect)(function () {
    highlight(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [source]);

  function highlight() {
    return _highlight.apply(this, arguments);
  }

  function _highlight() {
    _highlight = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var codes, _iterator, _step, val, tag, lang;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (mdp.current) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              codes = mdp.current.getElementsByTagName('code');
              _iterator = (0, _createForOfIteratorHelper2.default)(codes);
              _context.prev = 4;

              _iterator.s();

            case 6:
              if ((_step = _iterator.n()).done) {
                _context.next = 24;
                break;
              }

              val = _step.value;
              tag = val.parentNode;

              if (!(tag && tag.tagName === 'PRE' && /^language-/.test(val.className.trim()))) {
                _context.next = 22;
                break;
              }

              lang = val.className.trim().replace(/^language-/, '');
              _context.prev = 11;

              if (loadedLang.current.includes(lang)) {
                _context.next = 16;
                break;
              }

              loadedLang.current.push(lang);
              _context.next = 16;
              return (0, _langs.loadLang)(lang);

            case 16:
              _context.next = 18;
              return _prismjs.default.highlightElement(val);

            case 18:
              _context.next = 22;
              break;

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](11);

            case 22:
              _context.next = 6;
              break;

            case 24:
              _context.next = 29;
              break;

            case 26:
              _context.prev = 26;
              _context.t1 = _context["catch"](4);

              _iterator.e(_context.t1);

            case 29:
              _context.prev = 29;

              _iterator.f();

              return _context.finish(29);

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 26, 29, 32], [11, 20]]);
    }));
    return _highlight.apply(this, arguments);
  }

  (0, _react.useImperativeHandle)(ref, function () {
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, props), {}, {
      lang: loadedLang.current,
      mdp: mdp
    });
  }, [mdp, props]);
  var cls = "wmde-markdown wmde-markdown-color ".concat(className || '');
  var reactMarkdownProps = (0, _objectSpread2.default)((0, _objectSpread2.default)({
    allowDangerousHtml: true,
    allowNode: function allowNode(node, index, parent) {
      if (node.type === 'html' && reactMarkdownProps.allowDangerousHtml) {
        // filter style
        node.value = node.value.replace(/<((style|script|link|input|form)|\/(style|script|link|input|form))(\s?[^>]*>)/gi, function (a) {
          return a.replace(/[<>]/g, function (e) {
            return {
              '<': '&lt;',
              '>': '&gt;'
            }[e];
          });
        });
      }

      return true;
    }
  }, other), {}, {
    plugins: [_remarkGfm.default].concat((0, _toConsumableArray2.default)(other.plugins || [])),
    source: source || ''
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: mdp,
    onScroll: onScroll,
    onMouseOver: onMouseOver,
    className: cls,
    style: style
  }, /*#__PURE__*/_react.default.createElement(_reactMarkdown.default, reactMarkdownProps));
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJjbGFzc05hbWUiLCJzb3VyY2UiLCJzdHlsZSIsIm9uU2Nyb2xsIiwib25Nb3VzZU92ZXIiLCJvdGhlciIsIm1kcCIsImNyZWF0ZVJlZiIsImxvYWRlZExhbmciLCJ1c2VSZWYiLCJoaWdobGlnaHQiLCJjdXJyZW50IiwiY29kZXMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInZhbCIsInRhZyIsInBhcmVudE5vZGUiLCJ0YWdOYW1lIiwidGVzdCIsInRyaW0iLCJsYW5nIiwicmVwbGFjZSIsImluY2x1ZGVzIiwicHVzaCIsIlByaXNtIiwiaGlnaGxpZ2h0RWxlbWVudCIsImNscyIsInJlYWN0TWFya2Rvd25Qcm9wcyIsImFsbG93RGFuZ2Vyb3VzSHRtbCIsImFsbG93Tm9kZSIsIm5vZGUiLCJpbmRleCIsInBhcmVudCIsInR5cGUiLCJ2YWx1ZSIsImEiLCJlIiwicGx1Z2lucyIsImdmbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7NEJBaUJlQSxlQUFNQyxVQUFOLENBQTJELFVBQUNDLEtBQUQsRUFBUUMsR0FBUixFQUFnQjtBQUFBLGFBQ2pCRCxLQUFLLElBQUksRUFEUTtBQUFBLE1BQ2hGRSxTQURnRixRQUNoRkEsU0FEZ0Y7QUFBQSxNQUNyRUMsTUFEcUUsUUFDckVBLE1BRHFFO0FBQUEsTUFDN0RDLEtBRDZELFFBQzdEQSxLQUQ2RDtBQUFBLE1BQ3REQyxRQURzRCxRQUN0REEsUUFEc0Q7QUFBQSxNQUM1Q0MsV0FENEMsUUFDNUNBLFdBRDRDO0FBQUEsTUFDNUJDLEtBRDRCOztBQUV4RixNQUFNQyxHQUFHLGdCQUFHVixlQUFNVyxTQUFOLEVBQVo7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHWixlQUFNYSxNQUFOLENBQXVCLENBQUMsUUFBRCxDQUF2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QUFFQSxNQUFNLElBQUk7QUFiSSxJQUF4QjtBQWVBLHNCQUNFO0FBQUssSUFBQSxHQUFHLEVBQUVLLEdBQVY7QUFBZSxJQUFBLFFBQVEsRUFBRUgsUUFBekI7QUFBbUMsSUFBQSxXQUFXLEVBQUVDLFdBQWhEO0FBQTZELElBQUEsU0FBUyxFQUFFc0IsR0FBeEU7QUFBNkUsSUFBQSxLQUFLLEVBQUV4QjtBQUFwRixrQkFDRSw2QkFBQyxzQkFBRCxFQUFtQnlCLGtCQUFuQixDQURGLENBREY7QUFLRCxDQWxEYyxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlSW1wZXJhdGl2ZUhhbmRsZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdE1hcmtkb3duLCB7IFJlYWN0TWFya2Rvd25Qcm9wcyB9IGZyb20gJ3JlYWN0LW1hcmtkb3duJztcbmltcG9ydCBnZm0gZnJvbSAncmVtYXJrLWdmbSc7XG5pbXBvcnQgUHJpc20gZnJvbSAncHJpc21qcyc7XG5pbXBvcnQgJ3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1tYXJrdXAnO1xuaW1wb3J0IHsgbG9hZExhbmcgfSBmcm9tICcuL2xhbmdzJztcbmltcG9ydCAnLi9zdHlsZXMvbWFya2Rvd24ubGVzcyc7XG5pbXBvcnQgJy4vc3R5bGVzL21hcmtkb3duY29sb3IubGVzcyc7XG5cbmV4cG9ydCB0eXBlIE1hcmtkb3duUHJldmlld1Byb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHNvdXJjZT86IHN0cmluZztcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xuICBvblNjcm9sbD86IChlOiBSZWFjdC5VSUV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4gdm9pZDtcbiAgb25Nb3VzZU92ZXI/OiAoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHZvaWQ7XG59ICYgUmVhY3RNYXJrZG93blByb3BzO1xuXG5leHBvcnQgdHlwZSBNYXJrZG93blByZXZpZXdSZWYgPSB7XG4gIG1kcDogUmVhY3QuUmVmT2JqZWN0PEhUTUxEaXZFbGVtZW50PjtcbiAgbGFuZzogc3RyaW5nW10sXG59ICYgTWFya2Rvd25QcmV2aWV3UHJvcHM7XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmZvcndhcmRSZWY8TWFya2Rvd25QcmV2aWV3UmVmLCBNYXJrZG93blByZXZpZXdQcm9wcz4oKHByb3BzLCByZWYpID0+IHtcbiAgY29uc3QgeyBjbGFzc05hbWUsIHNvdXJjZSwgc3R5bGUsIG9uU2Nyb2xsLCBvbk1vdXNlT3ZlciwgLi4ub3RoZXIgIH0gPSBwcm9wcyB8fCB7fTtcbiAgY29uc3QgbWRwID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxEaXZFbGVtZW50PigpO1xuICBjb25zdCBsb2FkZWRMYW5nID0gUmVhY3QudXNlUmVmPHN0cmluZ1tdPihbJ21hcmt1cCddKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBoaWdobGlnaHQoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzb3VyY2VdKTtcblxuICBhc3luYyBmdW5jdGlvbiBoaWdobGlnaHQoKSB7XG4gICAgaWYgKCFtZHAuY3VycmVudCkgcmV0dXJuO1xuICAgIGNvbnN0IGNvZGVzID0gbWRwLmN1cnJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NvZGUnKSBhcyB1bmtub3duIGFzIEhUTUxFbGVtZW50W107XG4gICAgZm9yIChjb25zdCB2YWwgb2YgY29kZXMpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHZhbC5wYXJlbnROb2RlIGFzIEhUTUxFbGVtZW50O1xuICAgICAgaWYgKHRhZyAmJiB0YWcudGFnTmFtZSA9PT0gJ1BSRScgJiYgL15sYW5ndWFnZS0vLnRlc3QodmFsLmNsYXNzTmFtZS50cmltKCkpKSB7XG4gICAgICAgIGNvbnN0IGxhbmcgPSB2YWwuY2xhc3NOYW1lLnRyaW0oKS5yZXBsYWNlKC9ebGFuZ3VhZ2UtLywgJycpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghbG9hZGVkTGFuZy5jdXJyZW50LmluY2x1ZGVzKGxhbmcgYXMgbmV2ZXIpKSB7XG4gICAgICAgICAgICBsb2FkZWRMYW5nLmN1cnJlbnQucHVzaChsYW5nKTtcbiAgICAgICAgICAgIGF3YWl0IGxvYWRMYW5nKGxhbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBQcmlzbS5oaWdobGlnaHRFbGVtZW50KHZhbCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHsgLi4ucHJvcHMsIGxhbmc6IGxvYWRlZExhbmcuY3VycmVudCwgbWRwIH0pLCBbbWRwLCBwcm9wc10pO1xuXG4gIGNvbnN0IGNscyA9IGB3bWRlLW1hcmtkb3duIHdtZGUtbWFya2Rvd24tY29sb3IgJHtjbGFzc05hbWUgfHwgJyd9YDtcbiAgY29uc3QgcmVhY3RNYXJrZG93blByb3BzID0ge1xuICAgIGFsbG93RGFuZ2Vyb3VzSHRtbDogdHJ1ZSxcbiAgICBhbGxvd05vZGU6IChub2RlLCBpbmRleCwgcGFyZW50KSA9PiB7XG4gICAgICBpZiAobm9kZS50eXBlID09PSAnaHRtbCcgJiYgcmVhY3RNYXJrZG93blByb3BzLmFsbG93RGFuZ2Vyb3VzSHRtbCkge1xuICAgICAgICAvLyBmaWx0ZXIgc3R5bGVcbiAgICAgICAgbm9kZS52YWx1ZSA9IChub2RlLnZhbHVlIGFzIHN0cmluZykucmVwbGFjZSgvPCgoc3R5bGV8c2NyaXB0fGxpbmt8aW5wdXR8Zm9ybSl8XFwvKHN0eWxlfHNjcmlwdHxsaW5rfGlucHV0fGZvcm0pKShcXHM/W14+XSo+KS9naSwgKGE6IHN0cmluZykgPT4ge1xuICAgICAgICAgIHJldHVybiBhLnJlcGxhY2UoL1s8Pl0vZywgKGU6IHN0cmluZykgPT4gKCh7ICc8JzogJyZsdDsnLCAnPic6ICcmZ3Q7JyB9IGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pW2VdKSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIC4uLm90aGVyLFxuICAgIHBsdWdpbnM6IFtnZm0sICAuLi4ob3RoZXIucGx1Z2lucyB8fCBbXSldLFxuICAgIHNvdXJjZTogc291cmNlIHx8ICcnLFxuICB9IGFzIFJlYWN0TWFya2Rvd25Qcm9wcztcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJlZj17bWRwfSBvblNjcm9sbD17b25TY3JvbGx9IG9uTW91c2VPdmVyPXtvbk1vdXNlT3Zlcn0gY2xhc3NOYW1lPXtjbHN9IHN0eWxlPXtzdHlsZX0+XG4gICAgICA8UmVhY3RNYXJrZG93biB7Li4ucmVhY3RNYXJrZG93blByb3BzfSAvPlxuICAgIDwvZGl2PlxuICApO1xufSk7XG4iXX0=